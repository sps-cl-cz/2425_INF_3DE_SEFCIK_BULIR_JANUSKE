je asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfh
    je asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfh
    je asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfhje asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfhje asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfhje asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfhje asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfhje asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfhje asi dobre nevim
def sha1_calculation(pathspec):
    sha1_hash = hashlib.sha1()
    with open(pathspec, "rb") as f:
        for byteBlock in iter(lambda: f.read(4096), b""):
            sha1_hash.update(byteBlock)
    return sha1_hash.hexdigest()zdfh